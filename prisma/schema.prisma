// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// TODO: remove garb from auth
// I have no reason to store data from auth systems such as email, etc

// OPTI: Binary UUID
// save bytes by storing ids as binary uuids
// string cuid (22 bytes) -> binary uuid (16 bytes)
// https://github.com/prisma/prisma/issues/11414

// OPTI: Decimal Precision / Int Size
// save data by decreasing decimal precision of various fields (purity, efficacy, etc)
// save data by decreasing int size for freq

// OPTI: Binary Props
// store props in binary data for max opti
// seems overkill + lose some built-in prisma benefits, but optis are fun so

model Gem {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  soul   Soul?   @relation(fields: [soulId], references: [id])
  soulId String? @unique

  color   Int
  mass    Int
  clarity Decimal
  imbued  Boolean
}

model Soul {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  gem Gem?

  color    Int
  purity   Decimal
  efficacy Decimal
  freq     Int
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  username String? @unique
  gems     Gem[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
